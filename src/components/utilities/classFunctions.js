const _ = require('lodash'); 
export const calcSorceryPoints = (level) => {
   return level > 1 ? level : 0;
}

export const calcSpellsKnown = (charClass, level) => {
   let result;
   switch (charClass) {
      case 'sorcerer': 
         if (level < 12) result = level + 1;
         else if (level > 16) result = 15;
         else result = level - Math.floor((level - 12) / 2);
         break;   
      case 'warlock':
         if (level < 10) result = level + 1;
         else result = level - Math.floor((level - 10) / 2);
         break;
   }
   return result;
}

export const calcSpellSlots = (charClass, level) => {
   return spellSlotsObj[charClass][level];
}

const spellSlotsObj = {
   artificer: [
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 0, 0, 0, 0],
   ],
   barbarian: [],
   bard: [
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 1, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 2, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 2, 2, 1, 1],
   ],
   cleric: [
      [3, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 1, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 2, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 2, 2, 1, 1],
   ],
   druid: [
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [4, 4, 3, 3, 3, 2, 1, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 1, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 2, 1, 1, 1],
      [4, 4, 3, 3, 3, 3, 2, 2, 1, 1],
   ],
   fighter: [],
   monk: [],
   paladin: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 2, 0, 0, 0, 0],
   ],
   ranger: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [0, 4, 3, 3, 3, 2, 0, 0, 0, 0],
   ],
   rogue: [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [2, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [3, 4, 3, 3, 1, 0, 0, 0, 0, 0],
   ],
   sorcerer: [
      [4, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [4, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [4, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [5, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [5, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [5, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [5, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [5, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [5, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [6, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [6, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [6, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [6, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [6, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [6, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [6, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [6, 4, 3, 3, 3, 2, 1, 1, 1, 1],
      [6, 4, 3, 3, 3, 3, 1, 1, 1, 1],
      [6, 4, 3, 3, 3, 3, 2, 1, 1, 1],
      [6, 4, 3, 3, 3, 3, 2, 2, 1, 1]
   ],
   warlock: [
      [2, 1, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [2, 0, 2, 0, 0, 0, 0, 0, 0, 0],
      [3, 0, 2, 0, 0, 0, 0, 0, 0, 0],
      [3, 0, 0, 2, 0, 0, 0, 0, 0, 0],
      [3, 0, 0, 2, 0, 0, 0, 0, 0, 0],
      [3, 0, 0, 0, 2, 0, 0, 0, 0, 0],
      [3, 0, 0, 0, 2, 0, 0, 0, 0, 0],
      [3, 0, 0, 0, 0, 2, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 2, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 3, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 4, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 4, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 4, 0, 0, 0, 0],
      [4, 0, 0, 0, 0, 4, 0, 0, 0, 0]
   ],
   wizard: [
      [3, 2, 0, 0, 0, 0, 0, 0, 0, 0],
      [3, 3, 0, 0, 0, 0, 0, 0, 0, 0],
      [3, 4, 2, 0, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 0, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 2, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 0, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 1, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 2, 0, 0, 0, 0, 0],
      [4, 4, 3, 3, 3, 1, 0, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 0, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 0, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 0, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 0],
      [5, 4, 3, 3, 3, 2, 1, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 1, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 2, 1, 1, 1],
      [5, 4, 3, 3, 3, 3, 2, 2, 1, 1],
   ],
}

export const abilityScoreImprovements = (current) => {
   const level = current.level;
   const asiLevels = [4,8,12,16,19];
   const classBonus = current.abilities.bonus.class;
   // if (_.isEmpty(current.class) || level < 4) return {}
   if (_.isEmpty(classBonus)) {
      let count = 0;
      let ref = {select: []}
      for (let i = 0; i <= level; i++) {
         if (asiLevels.includes(i)) ref.select.push(['abilities', 2, 'ALL'])
      }
      return ref;
   }
}